////
// Material Color Palettes
// @group Atoms/MaterialDesgin
////

// ============================================================================
// Google Color Palettes (http://www.google.com/design/spec/style/color.html)
// @credit github.com/miguelcobain/ember-paper & github.com/angular/material
// ============================================================================
$LIGHT_CONTRAST: (
  'lighten-3': rgba(255, 255, 255, 0.05),
  'lighten-3': rgba(255, 255, 255, 0.12),
  'lighten-2': rgba(255, 255, 255, 0.5),
  'lighten-1': rgba(255, 255, 255, 0.7),
  'base': rgba(255, 255, 255, 0.87),
  'darken-1': rgba(255, 255, 255, 1)
);
$DARK_CONTRAST: (
  'lighten-4': rgba(0, 0, 0, 0.05),
  'lighten-3': rgba(0, 0, 0, 0.12),
  'lighten-2': rgba(0, 0, 0, 0.38),
  'lighten-1': rgba(0, 0, 0, 0.54),
  'base': rgba(0, 0, 0, 0.87),
  'darken-1': rgba(0, 0, 0, 1)
);
$RED: (
  'lighten-5': #ffebee,
  'lighten-4': #ffcdd2,
  'lighten-3': #ef9a9a,
  'lighten-2': #e57373,
  'lighten-1': #ef5350,
  'base': #f44336,
  'darken-1': #e53935,
  'darken-2': #d32f2f,
  'darken-3': #c62828,
  'darken-4': #b71c1c,
  'alt-1': #ff8a80,
  'alt-2': #ff5252,
  'alt-3': #ff1744,
  'alt-4': #d50000,
  'constrast-default': get($LIGHT_CONTRAST, 'base'),
  'constrast-dark': ('lighten-5', 'lighten-4', 'lighten-3', 'lighten-2', 'alt-1'),
  'constrast-light-strong': ('lighten-1', 'base', 'darken-1', 'darken-2', 'alt-2', 'alt-3', 'alt-4')
);
$PINK: (
  'lighten-5': #fce4ec,
  'lighten-4': #f8bbd0,
  'lighten-3': #f48fb1,
  'lighten-2': #f06292,
  'lighten-1': #ec407a,
  'base': #e91e63,
  'darken-1': #d81b60,
  'darken-2': #c2185b,
  'darken-3': #ad1457,
  'darken-4': #880e4f,
  'alt-1': #ff80ab,
  'alt-2': #ff4081,
  'alt-3': #f50057,
  'alt-4': #c51162,
  'constrast-default': get($LIGHT_CONTRAST, 'base'),
  'constrast-dark': ('lighten-5', 'lighten-4', 'lighten-3', 'alt-1'),
  'constrast-light-strong': ('base', 'darken-1', 'alt-2', 'alt-3', 'alt-4')
);
$PURPLE: (
  'lighten-5': #f3e5f5,
  'lighten-4': #e1bee7,
  'lighten-3': #ce93d8,
  'lighten-2': #ba68c8,
  'lighten-1': #ab47bc,
  'base': #9c27b0,
  'darken-1': #8e24aa,
  'darken-2': #7b1fa2,
  'darken-3': #6a1b9a,
  'darken-4': #4a148c,
  'alt-1': #ea80fc,
  'alt-2': #e040fb,
  'alt-3': #d500f9,
  'alt-4': #aa00ff,
  'constrast-default': get($LIGHT_CONTRAST, 'base'),
  'constrast-dark': ('lighten-5', 'lighten-4', 'lighten-3', 'alt-1'),
  'constrast-light-strong': ('lighten-2', 'lighten-1', 'alt-2', 'alt-3', 'alt-4')
);
$DEEP_PURPLE: (
  'lighten-5': #ede7f6,
  'lighten-4': #d1c4e9,
  'lighten-3': #b39ddb,
  'lighten-2': #9575cd,
  'lighten-1': #7e57c2,
  'base': #673ab7,
  'darken-1': #5e35b1,
  'darken-2': #512da8,
  'darken-3': #4527a0,
  'darken-4': #311b92,
  'alt-1': #b388ff,
  'alt-2': #7c4dff,
  'alt-3': #651fff,
  'alt-4': #6200ea,
  'constrast-default': get($LIGHT_CONTRAST, 'base'),
  'constrast-dark': ('lighten-5', 'lighten-4', 'lighten-3', 'alt-1'),
  'constrast-light-strong': ('lighten-2', 'lighten-1', 'alt-2')
);
$INDIGO: (
  'lighten-5': #e8eaf6,
  'lighten-4': #c5cae9,
  'lighten-3': #9fa8da,
  'lighten-2': #7986cb,
  'lighten-1': #5c6bc0,
  'base': #3f51b5,
  'darken-1': #3949ab,
  'darken-2': #303f9f,
  'darken-3': #283593,
  'darken-4': #1a237e,
  'alt-1': #8c9eff,
  'alt-2': #536dfe,
  'alt-3': #3d5afe,
  'alt-4': #304ffe,
  'contrast-default': get($LIGHT_CONTRAST, 'base'),
  'contrast-dark': ('lighten-5', 'lighten-4', 'lighten-3', 'alt-1'),
  'contrast-light-strong': ('lighten-2', 'lighten-1', 'alt-2', 'alt-3')
);
$BLUE: (
  'lighten-5': #e3f2fd,
  'lighten-4': #bbdefb,
  'lighten-3': #90caf9,
  'lighten-2': #64b5f6,
  'lighten-1': #42a5f5,
  'base': #2196f3,
  'darken-1': #1e88e5,
  'darken-2': #1976d2,
  'darken-3': #1565c0,
  'darken-4': #0d47a1,
  'alt-1': #82b1ff,
  'alt-2': #448aff,
  'alt-3': #2979ff,
  'alt-4': #2962ff,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'contrast-light': ('darken-3', 'darken-4'),
  'contrast-light-strong': ('darken-1', 'darken-2', 'alt-2', 'alt-3', 'alt-4')
);
$LIGHT_BLUE: (
  'lighten-5': #e1f5fe,
  'lighten-4': #b3e5fc,
  'lighten-3': #81d4fa,
  'lighten-2': #4fc3f7,
  'lighten-1': #29b6f6,
  'base': #03a9f4,
  'darken-1': #039be5,
  'darken-2': #0288d1,
  'darken-3': #0277bd,
  'darken-4': #01579b,
  'alt-1': #80d8ff,
  'alt-2': #40c4ff,
  'alt-3': #00b0ff,
  'alt-4': #0091ea,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'contrast-light': ('darken-4'),
  'contrast-light-strong': ('darken-2', 'darken-3', 'alt-4')
);
$CYAN: (
  'lighten-5': #e0f7fa,
  'lighten-4': #b2ebf2,
  'lighten-3': #80deea,
  'lighten-2': #4dd0e1,
  'lighten-1': #26c6da,
  'base': #00bcd4,
  'darken-1': #00acc1,
  'darken-2': #0097a7,
  'darken-3': #00838f,
  'darken-4': #006064,
  'alt-1': #84ffff,
  'alt-2': #18ffff,
  'alt-3': #00e5ff,
  'alt-4': #00b8d4,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'contrast-light': ('darken-4'),
  'contrast-light-strong': ('darken-2', 'darken-3')
);
$TEAL: (
  'lighten-5': #e0f2f1,
  'lighten-4': #b2dfdb,
  'lighten-3': #80cbc4,
  'lighten-2': #4db6ac,
  'lighten-1': #26a69a,
  'base': #009688,
  'darken-1': #00897b,
  'darken-2': #00796b,
  'darken-3': #00695c,
  'darken-4': #004d40,
  'alt-1': #a7ffeb,
  'alt-2': #64ffda,
  'alt-3': #1de9b6,
  'alt-4': #00bfa5,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'contrast-light': ('darken-4'),
  'contrast-light-strong': ('base', 'darken-1', 'darken-2', 'darken-3')
);
$GREEN: (
  'lighten-5': #e8f5e9,
  'lighten-4': #c8e6c9,
  'lighten-3': #a5d6a7,
  'lighten-2': #81c784,
  'lighten-1': #66bb6a,
  'base': #4caf50,
  'darken-1': #43a047,
  'darken-2': #388e3c,
  'darken-3': #2e7d32,
  'darken-4': #1b5e20,
  'alt-1': #b9f6ca,
  'alt-2': #69f0ae,
  'alt-3': #00e676,
  'alt-4': #00c853,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'contrast-light': ('darken-4'),
  'contrast-light-strong': ('darken-1', 'darken-2', 'darken-3')
);
$LIGHT_GREEN: (
  'lighten-5': #f1f8e9,
  'lighten-4': #dcedc8,
  'lighten-3': #c5e1a5,
  'lighten-2': #aed581,
  'lighten-1': #9ccc65,
  'base': #8bc34a,
  'darken-1': #7cb342,
  'darken-2': #689f38,
  'darken-3': #558b2f,
  'darken-4': #33691e,
  'alt-1': #ccff90,
  'alt-2': #b2ff59,
  'alt-3': #76ff03,
  'alt-4': #64dd17,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'contrast-light': ('darken-3', 'darken-4')
);
$LIME: (
  'lighten-5': #f9fbe7,
  'lighten-4': #f0f4c3,
  'lighten-3': #e6ee9c,
  'lighten-2': #dce775,
  'lighten-1': #d4e157,
  'base': #cddc39,
  'darken-1': #c0ca33,
  'darken-2': #afb42b,
  'darken-3': #9e9d24,
  'darken-4': #827717,
  'alt-1': #f4ff81,
  'alt-2': #eeff41,
  'alt-3': #c6ff00,
  'alt-4': #aeea00,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'contrast-light-strong': ('darken-4')
);
$YELLOW: (
  'lighten-5': #fffde7,
  'lighten-4': #fff9c4,
  'lighten-3': #fff59d,
  'lighten-2': #fff176,
  'lighten-1': #ffee58,
  'base': #ffeb3b,
  'darken-1': #fdd835,
  'darken-2': #fbc02d,
  'darken-3': #f9a825,
  'darken-4': #f57f17,
  'alt-1': #ffff8d,
  'alt-2': #ffff00,
  'alt-3': #ffea00,
  'alt-4': #ffd600,
  'contrast-default': get($DARK_CONTRAST, 'base')
);
$AMBER: (
  'lighten-5': #fff8e1,
  'lighten-4': #ffecb3,
  'lighten-3': #ffe082,
  'lighten-2': #ffd54f,
  'lighten-1': #ffca28,
  'base': #ffc107,
  'darken-1': #ffb300,
  'darken-2': #ffa000,
  'darken-3': #ff8f00,
  'darken-4': #ff6f00,
  'alt-1': #ffe57f,
  'alt-2': #ffd740,
  'alt-3': #ffc400,
  'alt-4': #ffab00,
  'contrast-default': get($DARK_CONTRAST, 'base')
);
$ORANGE: (
  'lighten-5': #fff3e0,
  'lighten-4': #ffe0b2,
  'lighten-3': #ffcc80,
  'lighten-2': #ffb74d,
  'lighten-1': #ffa726,
  'base': #ff9800,
  'darken-1': #fb8c00,
  'darken-2': #f57c00,
  'darken-3': #ef6c00,
  'darken-4': #e65100,
  'alt-1': #ffd180,
  'alt-2': #ffab40,
  'alt-3': #ff9100,
  'alt-4': #ff6d00,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'constrast-light': ('darken-4')
);
$DEEP_ORANGE: (
  'lighten-5': #fbe9e7,
  'lighten-4': #ffccbc,
  'lighten-3': #ffab91,
  'lighten-2': #ff8a65,
  'lighten-1': #ff7043,
  'base': #ff5722,
  'darken-1': #f4511e,
  'darken-2': #e64a19,
  'darken-3': #d84315,
  'darken-4': #bf360c,
  'alt-1': #ff9e80,
  'alt-2': #ff6e40,
  'alt-3': #ff3d00,
  'alt-4': #dd2c00,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'constrast-light-strong': ('darken-1', 'darken-2', 'darken-3', 'alt-3'),
  'constrast-light': ('darken-4', 'alt-4')
);
$BROWN: (
  'lighten-5': #efebe9,
  'lighten-4': #d7ccc8,
  'lighten-3': #bcaaa4,
  'lighten-2': #a1887f,
  'lighten-1': #8d6e63,
  'base': #795548,
  'darken-1': #6d4c41,
  'darken-2': #5d4037,
  'darken-3': #4e342e,
  'darken-4': #3e2723,
  'contrast-default': get($LIGHT_CONTRAST, 'base'),
  'constrast-dark': ('lighten-5', 'lighten-4', 'lighten-3'),
  'constrast-light-strong': ('lighten-2', 'lighten-1', 'base')
);
$GREY: (
  'lighten-5': #fafafa,
  'lighten-4': #f5f5f5,
  'lighten-3': #eeeeee,
  'lighten-2': #e0e0e0,
  'lighten-1': #bdbdbd,
  'base': #9e9e9e,
  'darken-1': #757575,
  'darken-2': #616161,
  'darken-3': #424242,
  'darken-4': #212121,
  'contrast-default': get($DARK_CONTRAST, 'base'),
  'constrast-light': ('darken-1', 'darken-2', 'darken-3', 'darken-4')
);
$BLUE_GREY: (
  'lighten-5': #eceff1,
  'lighten-4': #cfd8dc,
  'lighten-3': #b0bec5,
  'lighten-2': #90a4ae,
  'lighten-1': #78909c,
  'base': #607d8b,
  'darken-1': #546e7a,
  'darken-2': #455a64,
  'darken-3': #37474f,
  'darken-4': #263238,
  'contrast-default': get($LIGHT_CONTRAST, 'base'),
  'constrast-dark': ('lighten-5', 'lighten-4', 'lighten-3', 'lighten-2'),
  'constrast-light-strong': ('lighten-1', 'base', 'darken-1')
);
$SHADES: (
  'black': #000000,
  'white': #ffffff,
  'transparent': transparent
);

$material-palettes: (
  'red': $RED,
  'pink': $PINK,
  'purple': $PURPLE,
  'deep-purple': $DEEP_PURPLE,
  'indigo': $INDIGO,
  'blue': $BLUE,
  'light-blue': $LIGHT_BLUE,
  'cyan': $CYAN,
  'teal': $TEAL,
  'green': $GREEN,
  'light-green': $LIGHT_GREEN,
  'lime': $LIME,
  'yellow': $YELLOW,
  'amber': $AMBER,
  'orange': $ORANGE,
  'deep-orange': $DEEP_ORANGE,
  'brown': $BROWN,
  'grey': $GREY,
  'blue-grey': $BLUE_GREY,
  'shades': $SHADES,
  'dark-contrast': $DARK_CONTRAST,
  'light-contrast': $LIGHT_CONTRAST
);

// merge in the material palette
$color-palettes: map-merge($color-palettes, $material-palettes);

// allow addon consumers to use a different default pallette shade
$default-material-shade: 'base' !default;

// =================================================================================================
// Functions
// =================================================================================================

// Function: contrast-color
// @param {String | Map} $palette - (Required) name of a palette in $color-palettes or a color map
// @param {String}       $shade - (Optional) name of the palette shade
// @returns - the correct contrast color value for the given palette shade
@function contrast-color($palette, $shade: null) {
  $resolved-contrast-color: null;

  // resolve the palette and shade params
  $resolved-palette: resolve-palette($palette);
  $resolved-shade: resolve-shade($resolved-palette, $shade);

  // default contrast color
  $default-contrast: map-get($resolved-palette, 'contrast-default');
  // shades that use the dark contrast color
  $shades-dark: map-get($resolved-palette, 'contrast-dark');
  // shades that use the light contrast color
  $shades-light: map-get($resolved-palette, 'contrast-light');
  // shades that use the light strong contrast color
  $shades-light-strong: map-get($resolved-palette, 'contrast-light-strong');

  @if $shades-dark != null and index($shades-dark, $resolved-shade) != null {
    // resolved-shade is in $shades-dark
    $resolved-contrast-color: get($DARK_CONTRAST, 'base');
  } @else if $shades-light != null and index($shades-light, $resolved-shade) != null {
    // resolved-shade is in $shades-light
    $resolved-contrast-color: get($LIGHT_CONTRAST, 'base');
  } @else if $shades-light-strong != null and index($shades-light-strong, $resolved-shade) != null {
    // resolved-shade is in $shades-light-strong
    $resolved-contrast-color: get($LIGHT_CONTRAST, 'darken-1');
  } @else if $default-contrast != null {
    // resolved-shade is not found in any other list, use the default contrast
    $resolved-contrast-color: $default-contrast;
  } @else {
    @error 'Cannot find a contrast-color in pallete `#{$pallete}`';
    @return null;
  }

  @return $resolved-contrast-color;
}

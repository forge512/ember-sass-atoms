////
// Variables and Mixins for generating height declarations
// @group Atoms/Layout
////

// ============================================================================
// Variables
// ============================================================================
$DEFAULT_OPTS: (
  'default': inherit,
  'auto': auto,
  0: 0,
  1: rem(8),
  2: rem(16),
  3: rem(24),
  4: rem(32),
  5: rem(56),
  6: rem(64),
  7: rem(128),
  8: rem(256),
  '25%': 25%,
  '50%': 50%,
  '75%': 75%,
  '100%': 100%,
  'vh25': 25vh,
  'vh50': 50vh,
  'vh75': 75vh,
  'vh100': 100vh
);

// Allow consumers to define their own options
$height-opts: () !default;

// merge in the default options
$height-opts: map-merge($DEFAULT_OPTS, $height-opts);

// ============================================================================
// Mixins
// ============================================================================

////
// Mixin: height
// @param {String or Number} $key - a key in $height-opts
// @returns a height declaration
////
@mixin height($key: 'default') {
  height: if(map-has-key($height-opts, $key), get($height-opts, $key, 'height mixin'), $key);
}

////
// Mixin: max-height
// @param {String or Number} $key - a key in $height-opts
// @returns a max-height declaration
////
@mixin max-height($key: 'default') {
  max-height: if(map-has-key($height-opts, $key), get($height-opts, $key, 'height mixin'), $key);
}

////
// Mixin: min-height
// @param {String or Number} $key - a key in $height-opts
// @returns a min-height declaration
////
@mixin min-height($key: 'default') {
  min-height: if(map-has-key($height-opts, $key), get($height-opts, $key, 'height mixin'), $key);
}

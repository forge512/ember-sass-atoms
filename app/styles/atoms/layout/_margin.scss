////
// Variables and Mixins for generating margin declarations
// @group Atoms/Layout
////

// ============================================================================
// Variables
// ============================================================================
$DEFAULT_OPTS: map-merge(('default': initial, 'auto': auto), $DEFAULT_SIZES);

// merge in the default options
$margin-opts: map-merge($DEFAULT_OPTS, $margin-opts);

// ============================================================================
// Mixins
// ============================================================================

////
// Mixin: ma - sets margin for all directions
// @param {List or Number} $keys - one or more keys in $margin-opts
// @examples `@include ma(2,2,16)`, `@include ma(128)`
// @returns a margin declaration
////
@mixin ma($keys: 0) {
  @if type-of($keys) == list {
    // if $keys is a list...
    $values: ();
    @each $key in $keys {
      $value: if(map-has-key($margin-opts, $key), get($margin-opts, $key, 'ma mixin'), $key);
      $values: append($values, $value);
    }
    margin: $values;
  } @else {
    // if $keys is a anything else...
    margin: get($margin-opts, $keys, 'ma mixin');
  }
}

////
// Mixin: mv - sets margins for vertical directions
// @param {Number} $top - a key in $margin-opts (defaults to 0)
// @param {Number} $bottom - a key in $margin-opts (defaults to value of $top)
// @examples `@include mv(4,2)`, `@include mv(4)`
// @returns margin-top and margin-bottom declarations
////
@mixin mv($top: 0, $bottom: null) {
  @if $bottom {
    margin-bottom: if(
      map-has-key($margin-opts, $bottom),
      get($margin-opts, $bottom, 'mv mixin'),
      $bottom
    );
  } @else {
    margin-bottom: if(map-has-key($margin-opts, $top), get($margin-opts, $top, 'mv mixin'), $top);
  }
  margin-top: if(map-has-key($margin-opts, $top), get($margin-opts, $top, 'mv mixin'), $top);
}

////
// Mixin: mh - sets margins for horizontal directions
// @param {Number} $left - a key in $margin-opts (defaults to 0)
// @param {Number} $right - a key in $margin-opts (defaults to value of $left)
// @examples `@include mh(8,12)`, `@include mh(20)`
// @returns margin-left and margin-right declarations
////
@mixin mh($left: 0, $right: null) {
  @if $right {
    margin-right: if(
      map-has-key($margin-opts, $right),
      get($margin-opts, $right, 'mv mixin'),
      $right
    );
  } @else {
    margin-right: if(map-has-key($margin-opts, $left), get($margin-opts, $left, 'mh mixin'), $left);
  }
  margin-left: if(map-has-key($margin-opts, $left), get($margin-opts, $left, 'mh mixin'), $left);
}

////
// Mixin: mt - sets top margin
// @param {Number} $key - a key in $margin-opts (defaults to 0)
// @returns a margin-top declaration
////
@mixin mt($key: 0) {
  margin-top: if(map-has-key($margin-opts, $key), get($margin-opts, $key, 'mt mixin'), $key);
}

////
// Mixin: mr - sets right margin
// @param {Number} $key - a key in $margin-opts (defaults to 0)
// @returns a margin-right declaration
////
@mixin mr($key: 0) {
  margin-right: if(map-has-key($margin-opts, $key), get($margin-opts, $key, 'mr mixin'), $key);
}

////
// Mixin: mb - sets bottom margin
// @param {Number} $key - a key in $margin-opts (defaults to 0)
// @returns a margin-bottom declaration
////
@mixin mb($key: 0) {
  margin-bottom: if(map-has-key($margin-opts, $key), get($margin-opts, $key, 'mb mixin'), $key);
}

////
// Mixin: ml - sets left margin
// @param {Number} $key - a key in $margin-opts (defaults to 0)
// @returns a margin-left declaration
////
@mixin ml($key: 0) {
  margin-left: if(map-has-key($margin-opts, $key), get($margin-opts, $key, 'ml mixin'), $key);
}

////
// Variables and Mixins for generating width declarations
// @group Atoms/Layout
////

// ============================================================================
// Variables
// ============================================================================
$DEFAULT_OPTS: (
  'default': inherit,
  'auto': auto,
  0: 0,
  1: rem(8),
  2: rem(16),
  3: rem(24),
  4: rem(32),
  5: rem(56),
  6: rem(64),
  7: rem(128),
  8: rem(256),
  '10%': 10%,
  '20%': 20%,
  '25%': 25%,
  '30%': 30%,
  '33%': 33%,
  '34%': 34%,
  '40%': 40%,
  '50%': 50%,
  '60%': 60%,
  '70%': 70%,
  '75%': 75%,
  '80%': 80%,
  '90%': 90%,
  '100%': 100%,
  'one-third': calc(100% / 3),
  'two-thirds': calc(100% / 1.5)
);

// merge in the default options
$width-opts: map-merge($DEFAULT_OPTS, $aspect-ratios);

// ============================================================================
// Mixins
// ============================================================================

////
// Mixin: width
// @param {String or Number} $key - a key in $width-opts
// @returns a width declaration
////
@mixin width($key: 'default') {
  width: if(map-has-key($width-opts, $key), get($width-opts, $key, 'min-width mixin'), $key);
}

////
// Mixin: max-width
// @param {String or Number} $key - a key in $width-opts
// @returns a max-width declaration
////
@mixin max-width($key: 'default') {
  max-width: if(map-has-key($width-opts, $key), get($width-opts, $key, 'min-width mixin'), $key);
}

////
// Mixin: min-width
// @param {String or Number} $key - a key in $width-opts
// @returns a min-width declaration
////
@mixin min-width($key: 'default') {
  min-width: if(map-has-key($width-opts, $key), get($width-opts, $key, 'min-width mixin'), $key);
}

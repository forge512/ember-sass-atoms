////
// Variables and Mixins for generating width declarations
// @group Atoms/Layout
////

// ============================================================================
// Variables
// ============================================================================
$DEFAULT_OPTS: map-merge(
  (
    'default': inherit,
    'auto': auto,
    '10%': 10%,
    '20%': 20%,
    '25%': 25%,
    '30%': 30%,
    '33%': 33%,
    '34%': 34%,
    '40%': 40%,
    '50%': 50%,
    '60%': 60%,
    '70%': 70%,
    '75%': 75%,
    '80%': 80%,
    '90%': 90%,
    '100%': 100%,
    '1/3': calc(100% / 3),
    '2/3': calc(100% / 1.5)
  ),
  $DEFAULT_SIZES
);

// merge in the default options
$width-opts: map-merge($DEFAULT_OPTS, $width-opts);

// ============================================================================
// Mixins
// ============================================================================

////
// Mixin: w
// @param {String or Number} $key - a key in $width-opts
// @returns a width declaration
////
@mixin w($key: 'default') {
  width: if(map-has-key($width-opts, $key), get($width-opts, $key, 'min-width mixin'), $key);
}

////
// Mixin: mxw
// @param {String or Number} $key - a key in $width-opts
// @returns a max-width declaration
////
@mixin mxw($key: 'default') {
  max-width: if(map-has-key($width-opts, $key), get($width-opts, $key, 'min-width mixin'), $key);
}

////
// Mixin: mnw
// @param {String or Number} $key - a key in $width-opts
// @returns a min-width declaration
////
@mixin mnw($key: 'default') {
  min-width: if(map-has-key($width-opts, $key), get($width-opts, $key, 'min-width mixin'), $key);
}

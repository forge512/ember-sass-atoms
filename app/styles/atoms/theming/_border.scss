////
// Variables and Mixins for
// @group Atoms/Theming
////

// ============================================================================
// Variables
// ============================================================================
$DEFAULT_BORDER_WIDTH_OPTS: (
  'default': rem(1),
  'none': none,
  0: 0,
  1: rem(1),
  2: rem(2),
  4: rem(4),
  8: rem(8),
  16: rem(16)
);
$DEFAULT_BORDER_RADIUS_OPTS: (
  'default': 0,
  0: 0,
  2: rem(2),
  4: rem(4),
  8: rem(8),
  16: rem(16),
  '50%': 50%,
  '100%': 100%
);
$DEFAULT_BORDER_STYLE_OPTS: (
  'default': solid,
  'solid': solid,
  'dotted': dotted,
  'dashed': dashed
);
$DEFAULT_BORDERS: (
  'none': none,
  'transparent': 1px solid transparent,
  'black': 1px solid color('black', 'lighten-4'),
  'white': 1px solid color('white', 'lighten-4'),
  'theme-primary': 1px solid color('primary', 'darken-2'),
  'theme-accent': 1px solid color('accent', 'darken-2'),
  'theme-error': 1px solid color('error', 'darken-2'),
  'theme-success': 1px solid color('success', 'darken-2')
);

// merge in the default options
$border-width-opts: map-merge($DEFAULT_BORDER_WIDTH_OPTS, $border-width-opts);
$border-radius-opts: map-merge($DEFAULT_BORDER_RADIUS_OPTS, $border-radius-opts);
$border-style-opts: map-merge($DEFAULT_BORDER_STYLE_OPTS, $border-style-opts);
$borders: map-merge($DEFAULT_BORDERS, $borders);

// ============================================================================
// Functions
// ============================================================================

////
// Function: resolve-keys
// @param {String} $keys - list of keys to the borders or width, style, and color maps
// @returns - a list of the resolved values
////
@function resolve-keys($keys) {
  $values: null;
  @if length($keys) == 0 {
    $values: get($borders, 'black', 'resolve-keys fn');
  } @else if length($keys) == 1 and map-has-key($borders, nth($keys, 1)) {
    $values: get($borders, nth($keys, 1), 'resolve-keys fn');
  } @else {
    $values: ();
    $values: append($values, get($border-width-opts, nth($keys, 1), 'resolve-keys fn'));
    $values: append($values, get($border-style-opts, nth($keys, 2), 'resolve-keys fn'));
    $values: append($values, nth($keys, 3));
  }
  @return $values;
}

// ============================================================================
// Mixins
// ============================================================================

////
// Mixin: ba - define a border on all sides of an element
// @param {String or List} - a key in $borders or a list of keys ($width, $style, $color)
// @returns a border declaration
// @examples `@include ba(1 'solid' color('black', lighten-5))`, `@include ba('black')`
////
@mixin ba($keys...) {
  @debug $keys;
  border: resolve-keys($keys);
}

////
// Mixin: bt - define a top border on an element
// @param {String or List} - a key in $borders or a list of keys ($width, $style, $color)
// @returns a border-top declaration
// @examples `@include bt(1 'solid' color('black', lighten-5))`, `@include bt('black')`
////
@mixin bt($keys...) {
  border-top: resolve-keys($keys);
}

////
// Mixin: br - define a right border on an element
// @param {String or List} - a key in $borders or a list of keys ($width, $style, $color)
// @returns a border-right declaration
// @examples `@include br(1 'solid' color('black', lighten-5))`, `@include br('black')`
////
@mixin br($keys: 'black') {
  border-right: resolve-keys($keys);
}

////
// Mixin: bb - define a bottom border on an element
// @param {String or List} - a key in $borders or a list of keys ($width, $style, $color)
// @returns a border-bottom declaration
// @examples `@include bb(1 'solid' color('black', lighten-5))`, `@include bb('black')`
////
@mixin bb($keys: 'black') {
  border-bottom: resolve-keys($keys);
}

////
// Mixin: bl - define a left border on an element
// @param {String or List} - a key in $borders or a list of keys ($width, $style, $color)
// @returns a border-left declaration
// @examples `@include bl(1 'solid' color('black', lighten-5))`, `@include bl('black')`
////
@mixin bl($keys: 'black') {
  border-left: resolve-keys($keys);
}

////
// Mixin: ba-radius
// @param {Number} $key - a key in $border-radius-opts (defaults to 0)
// @returns a border-radius declaration
////
@mixin ba-radius($key: 0) {
  border-radius: get($border-radius-opts, $key, 'ba-radius mixin');
}

////
// Mixin: bt-radius
// @param {Number} $key - a key in $border-radius-opts (defaults to 0)
// @returns a border-top-left-radius, border-top-right-radius declarations
////
@mixin bt-radius($key: 0) {
  border-top-left-radius: get($border-radius-opts, $key, 'bt-radius mixin');
  border-top-right-radius: get($border-radius-opts, $key, 'bt-radius mixin');
}

////
// Mixin: br-radius
// @param {Number} $key - a key in $border-radius-opts (defaults to 0)
// @returns a border-top-right-radius, border-bottom-right-radius declarations
////
@mixin br-radius($key: 0) {
  border-top-right-radius: get($border-radius-opts, $key, 'br-radius mixin');
  border-bottom-right-radius: get($border-radius-opts, $key, 'br-radius mixin');
}

////
// Mixin: bb-radius
// @param {Number} $key - a key in $border-radius-opts (defaults to 0)
// @returns a border-bottom-left-radius, border-bottom-right-radius declarations
////
@mixin bb-radius($key: 0) {
  border-bottom-right-radius: get($border-radius-opts, $key, 'bb-radius mixin');
  border-bottom-left-radius: get($border-radius-opts, $key, 'bb-radius mixin');
}

////
// Mixin: bl-radius
// @param {Number} $key - a key in $border-radius-opts (defaults to 0)
// @returns a border-top-left-radius, border-bottom-left-radius declarations
////
@mixin bl-radius($key: 0) {
  border-top-left-radius: get($border-radius-opts, $key, 'bl-radius mixin');
  border-bottom-left-radius: get($border-radius-opts, $key, 'bl-radius mixin');
}

////
// Mixin: ba-color
// @param {String | Map} $palette - (Required) name of a palette in $color-palettes or a color map
// @param {String} $shade - (Optional) name of the palette shade
// @returns a border-color declaration
////
@mixin ba-color($palette, $shade) {
  border-color: color($palette, $shade);
}
